<?xml version="1.0"?>
<launch>

    <arg name="camera_model"         default="OAK-D-LITE" /> <!-- 'zed' or 'zedm' -->
    <arg name="tf_prefix"            default="oak" />
    <arg name="mode"                 default="depth" />
    <arg name="base_frame"           default="oak-d_frame" />
    <arg name="parent_frame"         default="oak-d-base-frame" />

    <arg name="cam_pos_x"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="cam_pos_y"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="cam_pos_z"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="cam_roll"              default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->
    <arg name="cam_pitch"             default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->
    <arg name="cam_yaw"               default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->

    <arg name="lrcheck"               default="true" />
    <arg name="extended"              default="false" />
    <arg name="subpixel"              default="true" />
    <arg name="camera_param_uri"      default="package://depthai_examples/params/camera" />
    <arg name="confidence"            default="200" /> 
    <arg name="LRchecktresh"          default="5" /> 
    <arg name="monoResolution"    default="720p" /> 

    <include file="$(find depthai_descriptions)/launch/urdf.launch">
        <arg name="base_frame"      value="$(arg  base_frame)"  />
        <arg name="parent_frame"    value="$(arg  parent_frame)"/>
        <arg name="camera_model"    value="$(arg  camera_model)"/>
        <arg name="tf_prefix"       value="$(arg  tf_prefix)" />
        <arg name="cam_pos_x"       value="$(arg  cam_pos_x)"   />
        <arg name="cam_pos_y"       value="$(arg  cam_pos_y)"   />
        <arg name="cam_pos_z"       value="$(arg  cam_pos_z)"   />
        <arg name="cam_roll"        value="$(arg  cam_roll)"    />
        <arg name="cam_pitch"       value="$(arg  cam_pitch)"   />
        <arg name="cam_yaw"         value="$(arg  cam_yaw)"     />
    </include>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~  depth_image_proc nodelet below ~~~~~~~~~~~~~~~~~~~ -->

    <node pkg="nodelet" type="nodelet" name="nodelet_manager"  args="manager" output="screen"/>

    <node name="stereo_publisher" pkg="nodelet" type="nodelet" output="screen" required="true"
        args="load depthai_examples/StereoNodelet nodelet_manager">
        <param name="tf_prefix" value="$(arg tf_prefix)"/>
        <param name="camera_param_uri" value="$(arg camera_param_uri)"/>
        <param name="mode" value="$(arg mode)"/>
        <param name="lrcheck" value="$(arg lrcheck)"/>
        <param name="extended" value="$(arg extended)"/>
        <param name="subpixel" value="$(arg subpixel)"/>
        <param name="confidence" value="$(arg confidence)"/>
        <param name="LRchecktresh" value="$(arg LRchecktresh)"/>
        <param name="monoResolution" value="$(arg monoResolution)"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="depth_image_convertion_nodelet"
        args="load depth_image_proc/convert_metric nodelet_manager">
        <remap from="image_raw" to="/stereo_publisher/stereo/depth"/>    
        <remap from="image" to="/stereo_publisher/stereo/image"/>
    </node>


    <node pkg="nodelet" type="nodelet" name="depth_image_to_pointcloud_nodelet"
        args="load depth_image_proc/point_cloud_xyz nodelet_manager">
        <remap from="camera_info" to="/stereo_publisher/stereo/camera_info"/>
        <remap from="image_rect" to="/stereo_publisher/stereo/image"/>    
        <remap from="points" to="/stereo_publisher/stereo/points"/>
    </node>

    <!-- Rviz configuration -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find gpd)/tutorials/tutorial2.rviz" />

  <!-- Load hand geometry parameters -->  
  <include file="$(find gpd)/launch/hand_geometry.launch">
    <arg name="node" value="detect_grasps" />
  </include>
  
  <!-- Load classifier parameters -->
  <include file="$(find gpd)/launch/lenet/ur5_classifier_15channels.launch">
    <arg name="node" value="detect_grasps" />
  </include>
  
	<node name="detect_grasps" pkg="gpd" type="detect_grasps" output="screen">
    
    <!-- If sequential importance sampling is used (default: false) -->
    <param name="use_importance_sampling" value="false" />
        
    <!-- What type of point cloud is used and what ROS topic it comes from -->
    <param name="cloud_type" value="1" /> <!-- 0: PointCloud2, 1: CloudIndexed, 2: CloudSamples -->
    <param name="cloud_topic" value="/cloud_indexed" />
    
    <!-- (optional) The ROS topic that the samples come from (default: an empty string) -->
    <param name="samples_topic" value="" />
    
    <!-- Plotting parameters -->
    <param name="plot_normals" value="false" />
    <param name="plot_samples" value="false" />    
    <param name="plot_candidates" value="false" />
    <param name="plot_filtered_grasps" value="false" />
    <param name="plot_valid_grasps" value="false" />
    <param name="plot_clusters" value="false" />
    <param name="plot_selected_grasps" value="false" />
    <param name="rviz_topic" value="grasps_rviz" />
    
    <!-- Preprocessing of point cloud -->
    <param name="voxelize" value="true"/>
    <param name="remove_outliers" value="false"/>
    <rosparam param="workspace"> [-1, 1, -1, 1, -1, 1] </rosparam>
    <!-- <rosparam param="workspace"> [-0.2, 0.2, -0.2, 0.2, -0.2, 0.2] </rosparam> -->
    <rosparam param="camera_position"> [0, 0, 0] </rosparam>
            
    <!-- General parameters -->
    <param name="num_samples" value="120" />
    <param name="num_threads" value="8" />
    
    <!-- Parameters for local grasp candidate search -->
    <param name="nn_radius" value="0.01" />
    <!-- <param name="nn_radius" value="0.1" /> -->
    <param name="num_orientations" value="8" /> <!-- Number of orientations to consider -->
    
    <!-- Filtering of grasp candidates --> 
    <param name="filter_grasps" value="false" /> <!-- on workspace and robot hand aperture -->
    <!-- <rosparam param="workspace_grasps"> [0.55, 1.0, -0.41, 0.03, -0.29, 1.0] </rosparam> -->
    <rosparam param="workspace_grasps"> [-0.5, 0.5, -0.5, 0.5, -0.5, 0.5] </rosparam>
    <param name="filter_half_antipodal" value="false"/> <!-- on half antipodal -->
    
    <!-- Filtering of grasps which are too low on (i.e. too close to) table -->
    <param name="filter_table_side_grasps" value="false" />
    <rosparam param="vertical_axis"> [0, 0, 1] </rosparam>
    <param name="angle_thresh" value="0.1" />
    <param name="table_height" value="0.0" />
    <param name="table_thresh" value="0.05" />
    
    <!-- Grasp image creation -->
    <param name="create_image_batches" value="false" /> <!-- creates grasp images in batches (less memory usage) -->
    <param name="remove_plane_before_image_calculation" value="false" /> <!-- removes table plane from point cloud to speed up shadow computations -->
    
    <!-- Clustering of grasps -->
    <param name="min_inliers" value="1" />
        
    <!-- Grasp selection -->
    <param name="min_score_diff" value="0" />
    <param name="min_aperture" value="0.02" />
    <param name="max_aperture" value="0.04" />
    <!-- <param name="min_aperture" value="0.1" />
    <param name="max_aperture" value="0.01" /> -->
    <param name="num_selected" value="5" />
        
	</node>

    <node pkg="grasp_n_sorter" type="cloud_publisher_rviz.py" name="cloud_publisher_rviz" output="screen" />
    
    <node pkg="grasp_n_sorter" type="get_grasps_server.py" name="get_grasps_server" output="screen" />

</launch>
